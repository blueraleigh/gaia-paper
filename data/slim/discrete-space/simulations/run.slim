initialize() {
    initializeSLiMModelType("nonWF");
    initializeTreeSeq();
    defineConstant("ADJMATFILE", paste(WD)+ "/landgrid-adjmat-ooa-" + paste(MAP) + ".csv");
    defineConstant("TREEFILE", paste(WD)+"/trees/tree-ooa-"+paste(MAP)+"-"+paste(REP)+".trees");
    defineConstant("K", 100); // carrying capacity per subpop
    defineConstant("N", 177); // number of subpopulations
    defineConstant("m", 0.001); // migration rate
    defineConstant("e", 0.0); // extinction rate
    initializeMutationType("m1", 0.5, "g", 0.0, 2);
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, 1e8 - 1);
    initializeMutationRate(0.0);
    initializeRecombinationRate(1e-8);
    initializeSex("A");
}
function (float)survival(integer x) {
    ans = float(length(x));
    c0 = which(x <= 1);
    c1 = which(x < 55 & x > 1);
    c2 = which(x >= 55);
    ans[c0] = 0.6;
    ans[c1] = 0.95;
    ans[c2] = pmax(-0.038*x[c2] + 3.04, 0.0);  // survivorship at 80 is 0
    return (ans);
}
reproduction(NULL, "F") {
      if (individual.age >= 15 & individual.age <= 40) {
          mate = subpop.sampleIndividuals(1, sex="M", minAge=15, maxAge=55);
          if (mate.size() == 1)
              subpop.addCrossed(individual, mate);
      }
}
1 early() {
    adjacency_matrix = asInteger(readCSV(ADJMATFILE).asMatrix());
    neighbors = matrix(rep(-1, N*6), N, 6);
    for (i in 0:(N-1)) {
        k = 0;
        for (j in 0:(N-1)) {
            if (j == i)
                next;
            if (c(adjacency_matrix[i,j]) == 1) {
                neighbors[i, k] = j;
                k = k + 1;
            }
        }
        if (k == 0) stop("Disconnected subpopulations are not allowed");
    }
    defineConstant("SUBPOPN", neighbors);
    for (i in 0:(N-1)) {
        subpop = sim.addSubpop(i, (i == 57) ? 10 else 0);
        if (i == 57)
            subpop.individuals.age = c(0,5,10,17,20,30,14,35,50,60);
    }
}
early() {
    // random migration
    nIndividuals = sum(sim.subpopulations.individualCount);
    nMigrants = rpois(1, nIndividuals * m);
    migrants = sample(sim.subpopulations.individuals, nMigrants);
    for (migrant in migrants)
    {
        if (migrant.age < 15) next;
        tries = 0;
        do {
            j = sample(0:5, 1);
            dest_id = c(SUBPOPN[migrant.subpopulation.id, j]);
            tries = tries + 1;
            if (dest_id != -1) break; 
        } while (tries < 100);
        if (dest_id == -1) {
            cat(migrant.subpopulation.id);
            cat("\n");
            cat(SUBPOPN[migrant.subpopulation.id,]);           
            stop("Failure to sample migrant subpopulation");
        }
        dest = sim.subpopulations[dest_id];
        dest.takeMigrants(migrant);
    }
    // density-dependence and random extinctions
    for (subpop in sim.subpopulations)
    {
        if (runif(1) < e) {
            sim.killIndividuals(subpop.individuals);
        } else {
            indivs = subpop.individuals;
            if (length(indivs)) {            
                s = survival(indivs.age);
                indivs.fitnessScaling = s;
                subpop.fitnessScaling = K / (subpop.individualCount * mean(s));
            }
        }
    }
}
late() {
    sim.treeSeqRememberIndividuals(sim.subpopulations.individuals, permanent=F);
    if (sum(sim.subpopulations.individualCount) == 0)
        stop("Global extinction in cycle " + sim.cycle + ".");
}
20000 late() {
    sim.treeSeqOutput(TREEFILE);
    sim.simulationFinished();
}
